##############
Basic Overview
##############

You can compile and flash your own code to the Core Module.
To do that you need to install PlatformIO to your computer

Every HARDWARIO TOWER - Industrial IoT Kit Module has its own library in the `HARDWARIO TOWER SDK <https://sdk.hardwario.com>`_.
So you just call **init** function and set the **callback** function.

In this section you will find code examples for **Core Module** and all the other HARDWARIO Modules.
More example code can be found in the GitHub `sdk/_examples <https://github.com/hardwario/twr-sdk/tree/master/_examples>`_ folder.

*****************
Firmware flashing
*****************

With these tools you can flash new firmware.

- :doc:`HARDWARIO Playground <../basics/hardwario-playground>` is a GUI multi-platform tool.
- | `PlatformIO <https://platformio.org>`_ is more advanced tool for creating your own firmware and flashing it to your device.
  | If you want to use it you can read the :doc:`Firmware quick start <firmware-quick-start>` section.


************
Example Code
************

Toggling a LED on button press with the **SDK** is as easy as this code snippet:

.. code-block:: c
    :linenos:

    #include <application.h>

    // LED instance
    twr_led_t led;

    // Button instance
    twr_button_t button;

    void button_event_handler(twr_button_t *self, twr_button_event_t event, void *event_param)
    {
        if (event == TWR_BUTTON_EVENT_PRESS)
        {
            twr_led_set_mode(&led, TWR_LED_MODE_TOGGLE);
        }
    }

    void application_init(void)
    {
        // Initialize LED
        twr_led_init(&led, TWR_GPIO_LED, false, false);
        twr_led_set_mode(&led, TWR_LED_MODE_ON);

        // Initialize button
        twr_button_init(&button, TWR_GPIO_BUTTON, TWR_GPIO_PULL_DOWN, false);
        twr_button_set_event_handler(&button, button_event_handler, NULL);
    }

********************
Programming Language
********************

Firmware is implemented in pure **C language**, which is an industrially accepted language for embedded and low-power devices.
There are the main reasons for choosing this technology:

- Effecient use of hardware resources
- Stability and long time available development environment
- Simple and understandable syntax

.. note::

    Effective use of hardware resources is important for developing of low-power devices. This is primary goal of HARDWARIO ecosystem.

You can choose from wide variety of systems and tools. Windows, macOS a Ubuntu (and other Debian derivatives) are supported.
For information how to install and use required tools, please see :doc:`Firmware quick start <firmware-quick-start>`.

******************
Diving Deep to SDK
******************

Basic pillar of every HARDWARIO TOWER - Industrial IoT Kit (software) project is an ecosystem of libraries, drivers and header files,
the so-called HARDWARIO SDK (which stands for `Software Development Kit <https://en.wikipedia.org/wiki/Software_development_kit>`_).

.. note::

    It can be found in `GitHub Repository <https://github.com/hardwario/twr-sdk>`_:

The header files include documentation, that can be generated by **Doxygen**.
You can find the most recent version of the `generated documentation here <https://sdk.hardwario.com>`_:

We try to stick to these principles while working the **SDK** development:

- Consistent and clear API design
- Modular and object oriented approach
- We prefer asynchronous, event-driven programming
- Well-named functions, data types, variables, etc.
- Simple way of access to low level hardware

***************
SDK Integration
***************

To your project, SDK is integrated as a **Git Submodule**. This has one advantage - your firmware can be "linked and locked" to a specific version of the **SDK**.
This makes sure that it will be possible to compile your firmware at any time in the future.
But if you need to, the **SDK** can be updated to most recent version by simple ``make update`` command.

.. caution::

    Please DO NOT integrate the SDK to your project as files extracted from the downloaded ZIP file from GitHub.
    Although this will work and firmware will compile,
    for getting technical support you will have to provide the exact version of the SDK used (a commit hash).

